import React, { useState, ChangeEvent, useEffect, useMemo } from 'react';
import type { NextPage } from 'next';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '@/components/ui/accordion';
import { Mail, Linkedin, Info, GraduationCap, Users, Edit, Save, XCircle, BookOpen, ScrollText, Library, Link as LinkIcon } from 'lucide-react';
import { cn } from '@/lib/utils'; // Utility for combining class names
import { motion, AnimatePresence } from 'framer-motion'; // For animations

// Define Publication Category Type
type PublicationCategory = 'Thesis' | 'Dissertation' | 'Confluence' | 'Synergy';

// Define the Publication data structure
interface Publication {
    id: string; // Unique identifier for each publication
    title: string;
    category: PublicationCategory;
    year: number;
    link?: string | null; // Optional link to the publication
}

// Define the Author data structure including publications
interface Author {
    author_id: string;
    full_name: string;
    affiliation: string;
    department: string;
    year_of_graduation?: number | null | string; // Allow string for input flexibility
    email?: string | null;
    linkedin?: string | null;
    orcid_id?: string | null;
    bio?: string | null;
    profile_picture?: string | null; // URL or path to image
    publications: Publication[]; // Array of publications
    created_at: string;
    updated_at: string;
}

// Sample Author Data with Publications
const sampleAuthor: Author = {
    author_id: "a1b2c3d4-e5f6-7890-1234-567890abcdef",
    full_name: "Dr. Evelyn Reed",
    affiliation: "Starlight University",
    department: "Astrophysics",
    year_of_graduation: 2010,
    email: "e.reed@starlight.edu",
    linkedin: "https://linkedin.com/in/evelynreed",
    orcid_id: "0000-0001-2345-6789",
    bio: "Dr. Evelyn Reed is a leading researcher in the field of exoplanetary science. Her work focuses on the atmospheric composition of distant worlds and the search for habitable environments beyond our solar system. She is passionate about science communication and mentoring the next generation of astronomers. Her recent publications explore novel techniques for detecting biosignatures in exoplanet atmospheres.",
    profile_picture: undefined,
    publications: [
        { id: "pub1", title: "Atmospheric Characterization of GJ 1214b", category: "Synergy", year: 2015, link: "https://example.com/Synergy1" },
        { id: "pub2", title: "Searching for Biosignatures on TRAPPIST-1e", category: "Synergy", year: 2018 },
        { id: "pub3", title: "Novel Techniques in Exoplanet Detection", category: "Confluence", year: 2019, link: "https://example.com/conf1" },
        { id: "pub4", title: "The Evolution of Planetary Atmospheres", category: "Dissertation", year: 2010 },
        { id: "pub5", title: "Early Universe Cosmology Models", category: "Thesis", year: 2006 },
        { id: "pub6", title: "High-Contrast Imaging for Exoplanet Discovery", category: "Confluence", year: 2021 },
    ],
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
};

// Helper function to group publications by category
const groupPublicationsByCategory = (publications: Publication[]) => {
    return publications.reduce((acc, pub) => {
        const category = pub.category;
        if (!acc[category]) {
            acc[category] = [];
        }
        acc[category].push(pub);
        // Sort publications within category by year descending
        acc[category].sort((a, b) => b.year - a.year);
        return acc;
    }, {} as Record<PublicationCategory, Publication[]>);
};

// Map categories to icons and ensure correct type
const categoryIcons: Record<PublicationCategory, React.ElementType> = {
    Thesis: ScrollText,
    Dissertation: BookOpen,
    Confluence: Users,
    Synergy: Library,
};

const AuthorProfilePage: NextPage = () => {
    const [author, setAuthor] = useState<Author>(sampleAuthor);
    const [isEditing, setIsEditing] = useState<boolean>(false);
    // Use a separate state for the edited version to allow cancellation
    const [editedAuthor, setEditedAuthor] = useState<Author>(sampleAuthor);
    const [fieldErrors, setFieldErrors] = useState<{ [key: string]: string }>({});
    // State specifically for the raw JSON string of publications during editing
    const [publicationsJson, setPublicationsJson] = useState<string>('');
    const [jsonError, setJsonError] = useState<string | null>(null);

    // Effect to reset edit form when toggling edit mode or when base author data changes
    useEffect(() => {
        if (isEditing) {
            // Deep copy might be needed if nested objects were mutable, but here spread is fine
            setEditedAuthor({ ...author });
            // Initialize the JSON textarea with the current publications
            setPublicationsJson(JSON.stringify(author.publications, null, 2));
            setFieldErrors({}); // Clear field errors
            setJsonError(null); // Clear JSON errors
        }
    }, [isEditing, author]);

    // Generic handler for simple input field changes
    const handleInputChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setEditedAuthor((prev) => ({
            ...prev,
            [name]: value,
        }));

        // Basic required field validation on change
        if (['full_name', 'affiliation', 'department'].includes(name)) {
            if (!value.trim()) {
                setFieldErrors((prev) => ({ ...prev, [name]: 'This field is required' }));
            } else {
                setFieldErrors((prev) => {
                    const newErrors = { ...prev };
                    delete newErrors[name]; // Remove error if field is now valid
                    return newErrors;
                });
            }
        }
    };

    // Handler specifically for the publications JSON textarea
    const handlePublicationsChange = (e: ChangeEvent<HTMLTextAreaElement>) => {
        const jsonString = e.target.value;
        setPublicationsJson(jsonString); // Update the raw JSON string state

        try {
            // Attempt to parse the JSON string
            const parsedPublications = JSON.parse(jsonString);

            // Validate the parsed structure (must be an array)
            if (!Array.isArray(parsedPublications)) {
                throw new Error("Input must be a valid JSON array.");
            }

            // Validate each publication object within the array
            const validCategories: PublicationCategory[] = ['Thesis', 'Dissertation', 'Confluence', 'Synergy'];
            parsedPublications.forEach((pub: any, index: number) => {
                if (typeof pub !== 'object' || pub === null) {
                    throw new Error(`Item at index ${index} is not a valid object.`);
                }
                if (!pub.id || typeof pub.id !== 'string') throw new Error(`Publication at index ${index} is missing a valid 'id' (string).`);
                if (!pub.title || typeof pub.title !== 'string') throw new Error(`Publication at index ${index} is missing a valid 'title' (string).`);
                if (!pub.category || !validCategories.includes(pub.category)) throw new Error(`Publication at index ${index} has an invalid or missing 'category'. Valid: ${validCategories.join(', ')}.`);
                if (pub.year === undefined || typeof pub.year !== 'number' || !Number.isInteger(pub.year)) throw new Error(`Publication at index ${index} is missing a valid 'year' (integer).`);
                if (pub.link !== undefined && pub.link !== null && typeof pub.link !== 'string') throw new Error(`Publication at index ${index} has an invalid 'link' (must be string, null, or undefined).`);
            });

            // If validation passes, update the publications in the editedAuthor state
            setEditedAuthor((prev) => ({
                ...prev,
                publications: parsedPublications as Publication[], // Assert type after validation
            }));
            setJsonError(null); // Clear JSON error if parsing and validation succeed
        } catch (error) {
            // If parsing or validation fails, set the JSON error message
            setJsonError(error instanceof Error ? error.message : "Invalid JSON format or structure.");
            // Optionally, you might want to prevent updating editedAuthor.publications here
            // or set it to an empty array or the last valid state depending on desired UX.
        }
    };

    // Handler for saving changes
    const handleSave = () => {
        // Re-run validation on save attempt
        const currentFieldErrors: { [key: string]: string } = {};
        if (!editedAuthor.full_name.trim()) currentFieldErrors.full_name = 'Full name is required';
        if (!editedAuthor.affiliation.trim()) currentFieldErrors.affiliation = 'Affiliation is required';
        if (!editedAuthor.department.trim()) currentFieldErrors.department = 'Department is required';
        setFieldErrors(currentFieldErrors);

        // Prevent saving if there are any field errors or JSON errors
        if (Object.keys(currentFieldErrors).length > 0 || jsonError) {
            return;
        }

        // Prepare final data (convert year, update timestamp)
        const finalAuthorData: Author = {
            ...editedAuthor,
            // Ensure year_of_graduation is number or null
            year_of_graduation: editedAuthor.year_of_graduation ? parseInt(String(editedAuthor.year_of_graduation), 10) : null,
            updated_at: new Date().toISOString(),
            // Publications are already updated in editedAuthor state via handlePublicationsChange
        };

        // Update the main author state (in a real app, this would be an API call)
        setAuthor(finalAuthorData);
        setIsEditing(false); // Exit edit mode
        console.log("Saved data:", finalAuthorData); // Log for debugging
    };

    // Handler for canceling edits
    const handleCancel = () => {
        setIsEditing(false);
        // No need to reset editedAuthor here, useEffect will handle it when isEditing changes
        setFieldErrors({}); // Clear errors
        setJsonError(null);
    };

    // Helper to get initials for avatar fallback
    const getInitials = (name: string) => {
        return name
            .split(' ')
            .map((n) => n[0])
            .filter(Boolean) // Ensure no empty strings if there are multiple spaces
            .join('')
            .toUpperCase();
    };

    // Determine which author object to display (original or edited version)
    const displayAuthor = isEditing ? editedAuthor : author;

    // Memoize grouped publications to avoid recalculation on every render unless publications change
    const groupedPublications = useMemo(() => groupPublicationsByCategory(displayAuthor.publications), [displayAuthor.publications]);
    const publicationCategories = Object.keys(groupedPublications) as PublicationCategory[];

    // Determine if the save button should be disabled
    const isSaveDisabled = Object.keys(fieldErrors).length > 0 || !!jsonError || !editedAuthor.full_name.trim() || !editedAuthor.affiliation.trim() || !editedAuthor.department.trim();

    // Animation variants
    const cardVariants = {
        hidden: { opacity: 0, y: 20 },
        visible: { opacity: 1, y: 0, transition: { duration: 0.3, ease: "easeInOut" } },
    };

    const listItemVariants = {
        hidden: { opacity: 0, x: -10 },
        visible: (i: number) => ({
            opacity: 1,
            x: 0,
            transition: {
                delay: i * 0.05, // Staggered delay
                duration: 0.2,
                ease: "easeInOut",
            },
        }),
    };

    return (
        <div className="container mx-auto p-4 md:p-8 bg-background text-foreground min-h-screen">
            {/* Edit/Save/Cancel Buttons */}
            <div className="flex justify-end mb-4 space-x-2">
                {isEditing ? (
                    <>
                        <Button
                            variant="outline"
                            size="sm"
                            onClick={handleCancel}
                            className="hover:bg-gray-100 dark:hover:bg-gray-700"
                        >
                            <XCircle className="mr-2 h-4 w-4" /> Cancel
                        </Button>
                        <Button
                            size="sm"
                            onClick={handleSave}
                            disabled={isSaveDisabled}
                            aria-disabled={isSaveDisabled}
                            className="bg-blue-500 hover:bg-blue-600 text-white"
                        >
                            <Save className="mr-2 h-4 w-4" /> Save Changes
                        </Button>
                    </>
                ) : (
                    <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setIsEditing(true)}
                        className="hover:bg-gray-100 dark:hover:bg-gray-700"
                    >
                        <Edit className="mr-2 h-4 w-4" /> Edit Profile
                    </Button>
                )}
            </div>

            <div className="flex flex-col md:flex-row gap-6 md:gap-8">
                {/* Left Column: Profile Picture, Basic Info, Links */}
                <div className="w-full md:w-1/3 lg:w-1/4 flex-shrink-0">
                    <motion.div
                        variants={cardVariants}
                        initial="hidden"
                        animate="visible"
                    >
                        <Card className="shadow-lg">
                            <CardHeader className="items-center text-center">
                                {/* Avatar */}
                                <Avatar className="w-24 h-24 mb-4 border-2 border-primary mx-auto">
                                    {displayAuthor.profile_picture ? (
                                        <AvatarImage
                                            src={displayAuthor.profile_picture}
                                            alt={displayAuthor.full_name}
                                            // Cross-origin attribute for broader compatibility if images are from external sources.
                                            crossOrigin="anonymous"
                                        />
                                    ) : (
                                        // Enhanced Placeholder
                                        <div className="bg-muted border border-dashed rounded-full w-full h-full flex items-center justify-center">
                                            <span className="text-2xl font-semibold text-muted-foreground">{getInitials(displayAuthor.full_name || '')}</span>
                                        </div>
                                    )}
                                    <AvatarFallback className="text-2xl">{getInitials(displayAuthor.full_name || '')}</AvatarFallback>
                                </Avatar>

                                {/* Name */}
                                {isEditing ? (
                                    <div className="w-full space-y-2">
                                        <Label htmlFor="full_name" className="text-sm font-medium">Full Name <span className="text-destructive">*</span></Label>
                                        <Input
                                            id="full_name"
                                            name="full_name"
                                            value={editedAuthor.full_name}
                                            onChange={handleInputChange}
                                            className={cn(
                                                "w-full px-4 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500",
                                                fieldErrors.full_name ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500',
                                                "dark:bg-gray-800 dark:border-gray-700 dark:text-white dark:focus:ring-blue-400",
                                                "transition-colors duration-200",
                                                "box-border" // Ensure padding and border don't increase the element's total width
                                            )}
                                            aria-required="true"
                                            aria-invalid={!!fieldErrors.full_name}
                                            aria-describedby={fieldErrors.full_name ? 'full_name-error' : undefined}
                                        />
                                        {fieldErrors.full_name && (
                                            <p id="full_name-error" className="text-xs text-red-500 mt-1">
                                                {fieldErrors.full_name}
                                            </p>
                                        )}
                                    </div>
                                ) : (
                                    <CardTitle className="text-2xl font-bold text-gray-900 dark:text-white break-words">{displayAuthor.full_name}</CardTitle>
                                )}

                                {/* Affiliation */}
                                {isEditing ? (
                                    <div className="w-full space-y-2 mt-2">
                                        <Label htmlFor="affiliation" className="text-sm font-medium">Affiliation <span className="text-destructive">*</span></Label>
                                        <Input
                                            id="affiliation"
                                            name="affiliation"
                                            value={editedAuthor.affiliation}
                                            onChange={handleInputChange}
                                            className={cn(
                                                "w-full px-4 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500",
                                                fieldErrors.affiliation ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500',
                                                "dark:bg-gray-800 dark:border-gray-700 dark:text-white dark:focus:ring-blue-400",
                                                "transition-colors duration-200",
                                                "box-border"
                                            )}
                                            aria-required="true"
                                            aria-invalid={!!fieldErrors.affiliation}
                                            aria-describedby={fieldErrors.affiliation ? 'affiliation-error' : undefined}
                                        />
                                        {fieldErrors.affiliation && (
                                            <p id="affiliation-error" className="text-xs text-red-500 mt-1">
                                                {fieldErrors.affiliation}
                                            </p>
                                        )}
                                    </div>
                                ) : (
                                    <CardDescription className="text-muted-foreground text-gray-600 dark:text-gray-400 break-words">
                                        {displayAuthor.affiliation}
                                    </CardDescription>
                                )}
                            </CardHeader>
                            <CardContent className="space-y-6">
                                {/* Department & Graduation Year */}
                                {isEditing ? (
                                    <>
                                        <div className="space-y-2">
                                            <Label htmlFor="department" className="text-sm font-medium">Department <span className="text-destructive">*</span></Label>
                                            <Input
                                                id="department"
                                                name="department"
                                                value={editedAuthor.department}
                                                onChange={handleInputChange}
                                                className={cn(
                                                    "w-full px-4 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500",
                                                    fieldErrors.department ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 focus:ring-blue-500',
                                                    "dark:bg-gray-800 dark:border-gray-700 dark:text-white dark:focus:ring-blue-400",
                                                    "transition-colors duration-200",
                                                    "box-border"
                                                )}
                                                aria-required="true"
                                                aria-invalid={!!fieldErrors.department}
                                                aria-describedby={fieldErrors.department ? 'department-error' : undefined}
                                            />
                                            {fieldErrors.department && (
                                                <p id="department-error" className="text-xs text-red-500 mt-1">
                                                    {fieldErrors.department}
                                                </p>
                                            )}
                                        </div>
                                        <div className="space-y-2">
                                            <Label htmlFor="year_of_graduation" className="text-sm font-medium">Year of Graduation</Label>
                                            <Input
                                                id="year_of_graduation"
                                                name="year_of_graduation"
                                                type="number" // Use number input type
                                                placeholder="YYYY"
                                                value={editedAuthor.year_of_graduation ?? ''}
                                                onChange={handleInputChange}
                                                className="w-full px-4 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-white dark:focus:ring-blue-400 transition-colors duration-200 box-border"
                                            />
                                        </div>
                                    </>
                                ) : (
                                    <>
                                        <div className="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400 flex-wrap">
                                            <Users className="w-4 h-4 flex-shrink-0" />
                                            <span className="break-words">{displayAuthor.department}</span>
                                        </div>
                                        {displayAuthor.year_of_graduation && (
                                            <div className="flex items-center space-x-2 text-sm text-gray-600 dark:text-gray-400 flex-wrap">
                                                <GraduationCap className="w-4 h-4 flex-shrink-0" />
                                                <span className="break-words">Graduated: {displayAuthor.year_of_graduation}</span>
                                            </div>
                                        )}
                                    </>
                                )}

                                <Separator className="my-4 bg-gray-200 dark:bg-gray-700" />

                                {/* Contact Links */}
                                {isEditing ? (
                                    <div className="space-y-4">
                                        <div className="space-y-2">
                                            <Label htmlFor="email" className="text-sm font-medium">Email</Label>
                                            <Input
                                                id="email"
                                                name="email"
                                                type="email"
                                                placeholder="name@example.com"
                                                value={editedAuthor.email ?? ''}
                                                onChange={handleInputChange}
                                                className="w-full px-4 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-white dark:focus:ring-blue-400 transition-colors duration-200 box-border"
                                            />
                                        </div>
                                        <div className="space-y-2">
                                            <Label htmlFor="linkedin" className="text-sm font-medium">LinkedIn URL</Label>
                                            <Input
                                                id="linkedin"
                                                name="linkedin"
                                                type="url"
                                                placeholder="https://linkedin.com/in/..."
                                                value={editedAuthor.linkedin ?? ''}
                                                onChange={handleInputChange}
                                                className="w-full px-4 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-white dark:focus:ring-blue-400 transition-colors duration-200 box-border"
                                            />
                                        </div>
                                        <div className="space-y-2">
                                            <Label htmlFor="orcid_id" className="text-sm font-medium">ORCID iD</Label>
                                            <Input
                                                id="orcid_id"
                                                name="orcid_id"
                                                placeholder="0000-0000-0000-0000"
                                                value={editedAuthor.orcid_id ?? ''}
                                                onChange={handleInputChange}
                                                className="w-full px-4 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-white dark:focus:ring-blue-400 transition-colors duration-200 box-border"
                                            />
                                        </div>
                                    </div>
                                ) : (
                                    <div className="space-y-2">
                                        {displayAuthor.email && (
                                            <Button
                                                variant="outline"
                                                size="sm"
                                                className="w-full justify-start text-left hover:bg-gray-100 dark:hover:bg-gray-700"
                                                asChild
                                            >
                                                <a
                                                    href={`mailto:${displayAuthor.email}`}
                                                    className="flex items-center gap-2 truncate text-blue-600 dark:text-blue-400 hover:underline" // Added underline
                                                    style={{ wordBreak: 'break-all' }} // Added inline style for better control
                                                >
                                                    <Mail className="h-4 w-4 flex-shrink-0" />
                                                    <span className="truncate" style={{ wordBreak: 'break-all' }}>{displayAuthor.email}</span>
                                                </a>
                                            </Button>
                                        )}
                                        {displayAuthor.linkedin && (
                                            <Button
                                                variant="outline"
                                                size="sm"
                                                className="w-full justify-start text-left hover:bg-gray-100 dark:hover:bg-gray-700"
                                                asChild
                                            >
                                                <a
                                                    href={displayAuthor.linkedin}
                                                    target="_blank"
                                                    rel="noopener noreferrer"
                                                    className="flex items-center gap-2 truncate text-blue-600 dark:text-blue-400 hover:underline" // Added underline and target
                                                    style={{ wordBreak: 'break-all' }} // Added inline style for better control
                                                >
                                                    <Linkedin className="h-4 w-4 flex-shrink-0" />
                                                    <span className="truncate" style={{ wordBreak: 'break-all' }}>LinkedIn Profile</span>
                                                </a>
                                            </Button>
                                        )}
                                        {displayAuthor.orcid_id && (
                                            <Button
                                                variant="outline"
                                                size="sm"
                                                className="w-full justify-start text-left hover:bg-gray-100 dark:hover:bg-gray-700"
                                                asChild
                                            >
                                                <a
                                                    href={`https://orcid.org/${displayAuthor.orcid_id}`}
                                                    target="_blank"
                                                    rel="noopener noreferrer"
                                                    className="flex items-center gap-2 truncate text-blue-600 dark:text-blue-400 hover:underline"  // Added underline and target
                                                    style={{ wordBreak: 'break-all' }} // Added inline style for better control

                                                >
                                                    <Info className="h-4 w-4 flex-shrink-0" />
                                                    <span className="truncate" style={{ wordBreak: 'break-all' }}>ORCID iD: {displayAuthor.orcid_id}</span>
                                                </a>
                                            </Button>
                                        )}
                                    </div>
                                )}
                            </CardContent>
                        </Card>
                    </motion.div>
                </div>

                {/* Right Column: Biography and Publications */}
                <div className="w-full md:w-2/3 lg:w-3/4">
                    <motion.div
                        variants={cardVariants}
                        initial="hidden"
                        animate="visible"
                    >
                        <Card className="shadow-lg">
                            <CardHeader>
                                <CardTitle className="text-2xl font-bold text-gray-900 dark:text-white">Biography</CardTitle>
                            </CardHeader>
                            <CardContent>
                                {isEditing ? (
                                    <Textarea
                                        id="bio"
                                        name="bio"
                                        value={editedAuthor.bio ?? ''}
                                        onChange={handleInputChange}
                                        className="w-full px-4 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-white dark:focus:ring-blue-400 transition-colors duration-200 min-h-[120px] resize-y box-border"
                                        placeholder="Enter your biography here..."
                                    />
                                ) : (
                                    <p className="text-gray-700 dark:text-gray-300 leading-relaxed whitespace-pre-line">
                                        {displayAuthor.bio || "No biography available."}
                                    </p>
                                )}
                            </CardContent>
                        </Card>
                    </motion.div>

                    <motion.div
                        variants={cardVariants}
                        initial="hidden"
                        animate="visible"
                        className="mt-6"
                    >
                        <Card className="shadow-lg">
                            <CardHeader>
                                <CardTitle className="text-2xl font-bold text-gray-900 dark:text-white">Publications</CardTitle>
                            </CardHeader>
                            <CardContent>
                                {isEditing ? (
                                    <>
                                        <Label htmlFor="publications-json" className="text-sm font-medium block mb-2">
                                            Publications (JSON format)
                                        </Label>
                                        <Textarea
                                            id="publications-json"
                                            value={publicationsJson}
                                            onChange={handlePublicationsChange}
                                            className={cn(
                                                "w-full px-4 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-white dark:focus:ring-blue-400 transition-colors duration-200 min-h-[200px] resize-y font-mono text-sm",
                                                jsonError ? "border-red-500 focus:ring-red-500" : ""
                                            )}
                                            placeholder="Enter publications in JSON format..."
                                            aria-invalid={!!jsonError}
                                            aria-describedby={jsonError ? 'publications-json-error' : undefined}
                                        />
                                        {jsonError && (
                                            <p id="publications-json-error" className="text-xs text-red-500 mt-1">
                                                {jsonError}
                                            </p>
                                        )}
                                    </>
                                ) : (
                                    <Accordion type="single" collapsible className="w-full">
                                        {publicationCategories.map((category) => (
                                            <AccordionItem key={category} value={category}>
                                                <AccordionTrigger>
                                                    <div className="flex items-center gap-2">
                                                        {React.createElement(categoryIcons[category], { className: "w-5 h-5" })}
                                                        <span>{category}</span>
                                                    </div>
                                                </AccordionTrigger>
                                                <AccordionContent>
                                                    <AnimatePresence>
                                                        {groupedPublications[category].map((pub, index) => (
                                                            <motion.div
                                                                key={pub.id}
                                                                variants={listItemVariants}
                                                                initial="hidden"
                                                                animate="visible"
                                                                custom={index}
                                                                exit="hidden"
                                                                className="py-1" // Reduced vertical padding for tighter spacing
                                                            >
                                                                <div className="flex justify-between items-start gap-4">
                                                                    <div>
                                                                        <span className="font-semibold text-gray-900 dark:text-white break-words">{pub.title}</span>
                                                                        <span className="text-gray-500 dark:text-gray-400 ml-2">({pub.year})</span>
                                                                    </div>
                                                                    {pub.link && (
                                                                        <a
                                                                            href={pub.link}
                                                                            target="_blank"
                                                                            rel="noopener noreferrer"
                                                                            className="text-blue-600 dark:text-blue-400 hover:underline flex items-center gap-1"
                                                                            style={{ wordBreak: 'break-all' }} // Added inline style

                                                                        >
                                                                            <LinkIcon className="w-4 h-4" />
                                                                            Link
                                                                        </a>
                                                                    )}
                                                                </div>
                                                            </motion.div>
                                                        ))}
                                                    </AnimatePresence>
                                                </AccordionContent>
                                            </AccordionItem>
                                        ))}
                                    </Accordion>
                                )}
                            </CardContent>
                        </Card>
                    </motion.div>
                </div>
            </div>
        </div>
    );
};

export default AuthorProfilePage;
